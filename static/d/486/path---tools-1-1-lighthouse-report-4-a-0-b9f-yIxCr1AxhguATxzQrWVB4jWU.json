{"data":{"site":{"siteMetadata":{"title":"PerfReviews","author":"Joan León y José M. Pérez"}},"markdownRemark":{"id":"0ac68441-6928-54ea-bb66-c5f545583353","excerpt":"Una de las herramientas que utilizamos para hacer las PerfReview es  Lighthouse , vamos a ver cómo utilizarlo para crear unos informes de Performance de…","html":"<p>Una de las herramientas que utilizamos para hacer las PerfReview es <a href=\"https://developers.google.com/web/tools/lighthouse/\">Lighthouse</a>, vamos a ver cómo utilizarlo para crear unos informes de Performance de diferentes sites.</p>\n<p>Podréis encontrar todo el código en el repositorio <a href=\"https://github.com/PerfReviews/PerfTools\">PerfTools</a>.</p>\n<hr>\n<h2>Optimizando el script</h2>\n<p>En el vídeo del canal generamos un script con la previsión de extender algunas de las funcionalidades, en esta ocasión vamos a generar un scriot más óptimo.</p>\n<blockquote>\n<p>Encontraréis el vídeo al final del artículo.</p>\n</blockquote>\n<h2>Informes de Performance</h2>\n<p>El objetivo es generar un html con el listado de los informes de performances de los sites que definamos en el archivo <code class=\"language-text\">data.js</code>.</p>\n<h4>Este será el resultado</h4>\n<p><img src=\"./LighthouseReort.jpg\" alt=\"Lighthouse Report\"></p>\n<h2>Requisitos</h2>\n<p>Vamos a necesitar tener instalado Node.js, si no lo tenemos instalado en el sistema, podemos seguis las instrucciones de la <a href=\"https://nodejs.org\">documentación oficial</a>.</p>\n<h2>Instalando las dependencias</h2>\n<p>Lo primero que haremos es inicializar <strong>npm</strong> en nuestra carpeta PerfTools-Lighthouse-Report con <code class=\"language-text\">npm init -y</code> para generar el archivo <code class=\"language-text\">package.json</code> y poder instalar los paquetes npm que utilizaremos como dependencias.</p>\n<p>Desde la terminal ejecutamos el siguiente comando para instalar las dependencias.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm install --save chrome-launcher lighthouse</code></pre></div>\n<blockquote>\n<p>En el vídeo también incluimos <code class=\"language-text\">puppeteer request util</code>, ya que la idea era trabajar más a fondo con Puppeteer, pero en esta ocasión lo vamos a obviar para tener un código más limpio y legible.</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Package</th>\n<th>Descripción</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>chrome-launcher</td>\n<td>Nos permite lanzar Google Chrome desde Node.js.</td>\n</tr>\n<tr>\n<td>lighthouse</td>\n<td>La herramienta que nos generará el informe.</td>\n</tr>\n</tbody>\n</table>\n<p>Ahora que hemos instalado las dependencias, vamo a crear el archivo <code class=\"language-text\">data.js</code> que nos servirá para definir las urls de las que queremos conseguis los informes de Web Performance.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  mediamarkt<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://www.mediamarkt.es/'</span><span class=\"token punctuation\">,</span>\n  elcorteingles<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://www.elcorteingles.es/'</span><span class=\"token punctuation\">,</span>\n  zara<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://www.zara.com/es/'</span><span class=\"token punctuation\">,</span>\n  smashingmagazine<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://www.smashingmagazine.com/'</span><span class=\"token punctuation\">,</span>\n  renfe<span class=\"token punctuation\">:</span> <span class=\"token string\">'http://www.renfe.com/'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Creando el script</h2>\n<p>Creamos un archivo <code class=\"language-text\">report.js</code> donde lo primero que hacemos es importar todos los módulos que necesitamos.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> chromeLauncher <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chrome-launcher'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lighthouse <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lighthouse'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ReportGenerator <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lighthouse/lighthouse-core/report/report-generator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Seguidos de las variables que utilizaremos en la aplicación.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> sites <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./data'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">package</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./package.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dir <span class=\"token operator\">=</span> <span class=\"token string\">'./reports'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> links <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>En la constante <code class=\"language-text\">sites</code> tendremos los sites de los que queremos generar los informes, en <code class=\"language-text\">package</code> el contenido del fichero <code class=\"language-text\">package.json</code> para tener acceso a su contenido, en <code class=\"language-text\">dir</code> definimos la carpeta de salida para los informes y por último, definimos <code class=\"language-text\">links</code> como un array donde añadiremos los enlaces a los informes de cada site.</p>\n<p>Con la siguiente condicional, simplemente nos aseguramos que el directorio <code class=\"language-text\">reports</code> existe, sino, lo creamo.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">existsSync</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirSync</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Hemos llegado a la parte core del script, la comentaremos por bloques.</p>\n<p>En primer lugar podemos ver que todo el código lo tenemos en una función anónima auto ejecutada.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> id <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>sites<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">URL</span> <span class=\"token operator\">=</span> sites<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Testing </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> on </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>El primer bloque es un <code class=\"language-text\">for</code> para ejecutar nuestro códifo a cada uno de los sites que hemos definido en <code class=\"language-text\">data.js</code>. En su interior lo primero que tenemos es una constante con la url del site, seguido de in <code class=\"language-text\">console.log</code> para informarnos del proceso.</p>\n<p>Seguimos con otra función anónima autoejecutada, esta función es asíncrona, y con <code class=\"language-text\">await</code> indicamos que queremos que el proceso espere hasta que tenga una respuesta, ya que no tenemos ningún control sobre los tiempos de carga de los sites.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    chromeFlags<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'--headless'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    logLevel<span class=\"token punctuation\">:</span> <span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span>\n    onlyCategories<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'performance'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Launch chrome using chrome-launcher.</span>\n  <span class=\"token keyword\">const</span> chrome <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> chromeLauncher<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  opts<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> chrome<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Lo primero que haremos es utilizar <code class=\"language-text\">chromeLauncher</code> para abrir cada uno de los sites en el navegador. Hemos creado la constante <code class=\"language-text\">opts</code> para definir las opciones de configuración</p>\n<table>\n<thead>\n<tr>\n<th>Opción</th>\n<th>Descripción</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">chromeFlags: [&#39;--headless&#39;]</code></td>\n<td>Con este flag, Chrome no abrirá una ventana del navegador.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">logLevel: &#39;info&#39;</code></td>\n<td>Por defecto no se muestra el proceso en la terminal, con <code class=\"language-text\">info</code> veremos información del proceso.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">onlyCategories: [&#39;performance&#39;]</code></td>\n<td>Esta valor lo utilizaremos en Lighthouse, para indicar que sólo queremos el informe de Performance.</td>\n</tr>\n</tbody>\n</table>\n<p>Llegó la hora de ejecutar Lighthouse.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Run Lighthouse.</span>\n<span class=\"token keyword\">const</span> lhr <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">lighthouse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> ReportGenerator<span class=\"token punctuation\">.</span><span class=\"token function\">generateReport</span><span class=\"token punctuation\">(</span>lhr<span class=\"token punctuation\">.</span>lhr<span class=\"token punctuation\">,</span> <span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dir<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.html`</span></span><span class=\"token punctuation\">,</span> html<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`The html file for </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> was saved!`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  links<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`&lt;li>&lt;a href=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.html\" target=\"_blank\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/a>&lt;/li>`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">await</span> chrome<span class=\"token punctuation\">.</span><span class=\"token function\">kill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>En la primera línea ejecutamos lighthouse, donde le pasamos 3 argumentos: la url del site a analizar, las opciones, en este caso <code class=\"language-text\">onlyCategories: [&#39;performance&#39;]</code> y por último con el parámetro <code class=\"language-text\">null</code> le indicamos que no pasamos una configuración, así que utilizaremos la <a href=\"https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/config/default-config.js\">configuración por defecto</a>.</p>\n<p>En este punto ya tenemos el resultado de lighthouse en la variable <code class=\"language-text\">lhr</code>, así que en la siguiente línea utilizamos <code class=\"language-text\">ReportGenerator.generateReport(lhr.lhr, &#39;html&#39;)</code> para generar el html que nos permita interpretar mejor todos los datos.</p>\n<p>En el siguiente código utilizamos la API de Node.je <code class=\"language-text\">fs</code> para guardar en un archivo html el resultado. Le pasamos como primer argumento la ruta, como segundo argumento el informe y por último una función callback donde mostramos un mensaje de que se ha guardado el informe y añadimos al array <code class=\"language-text\">sites</code> un elemento <code class=\"language-text\">&lt;li&gt;</code> con un enlace al archivo que acavamos de guardar. En el caso de que lo hubier, se mostraría un error en la terminal.</p>\n<p>Por último, con <code class=\"language-text\">await chrome.kill();</code> cerramos el proceso de chrome, ya que lo inicializaremos en la seguiente iteración.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> ToC <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`&lt;html>\n      &lt;head>\n        &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.4/css/bulma.min.css\">\n      &lt;/head>\n      &lt;body style=\"padding: 2em\">\n        &lt;h1 class=\"title\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/h1>\n        &lt;h2 class=\"subtitle\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>description<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/h2>\n        &lt;aside class=\"menu\">\n          &lt;p class=\"menu-label\">PerfReviews&lt;/p>\n          &lt;ul class=\"menu-list\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>links<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/ul>\n        &lt;/aside>\n      &lt;/body>\n&lt;/html>`</span></span><span class=\"token punctuation\">;</span>\n\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dir<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/index.html`</span></span><span class=\"token punctuation\">,</span> ToC<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------------------'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">' ToC for sites was saved! 😊 '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------------------'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cómo último paso, generamos un ToC (Table of Content) o índice, con los enlaces a los informes. Por la simplicidad del html, no hemos utilizado una librería de plantillas, pero sí hemos importado <a href=\"https://bulma.io/\">Bulma</a> para añadir estilos 😊.</p>\n<p>Y como en el paso anterior, utilizamos <code class=\"language-text\">fs</code> para guardar el archivo <code class=\"language-text\">index.html</code> con los enlaces a todos los informes.</p>\n<h2>Código</h2>\n<p>En el <a href=\"https://github.com/PerfReviews/PerfTools/tree/master/Lighthouse-Report\">repositorio</a> encontrarás todo el código, tanto la versión de este artículo en <code class=\"language-text\">report.js</code> como la versión que comentamos en el vídeo <code class=\"language-text\">index.js</code>.</p>\n<h2>Vídeo</h2>\n<div>\n          <div\n            class=\"gatsby-resp-iframe-wrapper\"\n            style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem\"\n          >\n            <iframe src=\"https://www.youtube.com/watch?v=1x2A2wZKJPU\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen style=\"\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          \"></iframe>\n          </div>\n          </div>","frontmatter":{"title":"Lighthouse Report","date":"January 14, 2019","description":"Vamos a crear un script en node.js para obtener informes de Web Performance utilizando Lighthouse, todo ello desde la terminal. Esto nos permitirá poder automatizar el proceso en diversos workflows.","featuredImage":{"childImageSharp":null}}}},"pageContext":{"slug":"/tools/1.1-Lighthouse-Report/","previous":{"fields":{"slug":"/reviews/1.3-zara.com/"},"frontmatter":{"title":"Zara"}},"next":{"fields":{"slug":"/reviews/1.4-smashingmagazine.com/"},"frontmatter":{"title":"Smashing Magazine"}}}}